generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  fname        String
  lname        String
  email        String      @unique
  password     String
  gender       String?
  phone        String?
  address      String?
  image        String?
  status       String      @default("off")
  verified     String      @default("unverified")
  refreshToken String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  workspaces   Workspace[]
  FolderChat   FolderChat? @relation(fields: [folderChatId], references: [id])
  folderChatId String?
  Chat         Chat?       @relation(fields: [chatId], references: [id])
  chatId       String?
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folders   Folder[]
  users     User[]
}

model Folder {
  id          String       @id @default(uuid())
  name        String
  workspaceId String
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  files       File[]
  FolderChat  FolderChat[]
}

model FolderChat {
  id            String          @id @default(uuid())
  name          String
  folderId      String
  folder        Folder          @relation(fields: [folderId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         User[]
  FolderMessage FolderMessage[]
}

model FolderMessage {
  id            String     @id @default(uuid())
  from          String
  to            String
  message       String
  latestMessage String
  folderChatId  String
  folderChat    FolderChat @relation(fields: [folderChatId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model File {
  id        String   @id @default(uuid())
  name      String
  content   String?
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id            String     @id @default(uuid())
  chatName      String
  isGroupChat   Boolean    @default(false)
  latestMessage String?
  groupAdmin    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  users         User[]
  Messaage      Messaage[]
}

model Messaage {
  id        String   @id @default(uuid())
  sender    String
  content   String
  readby    String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
