generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  fname        String
  lname        String
  email        String      @unique
  password     String
  gender       String?
  phone        String?
  address      String?
  image        String?
  status       String      @default("off")
  verified     String      @default("unverified")
  refreshToken String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  workspaces   Workspace[]
  chats        Chat[]
  members      Members[]
}

model Workspace {
  id        String    @id @default(uuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  folders   Folder[]
  members   Members[]
}

model Members {
  id          String    @id @default(uuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Folder {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  files       File[]
  chat        Chat[]
}

model File {
  id        String   @id @default(uuid())
  name      String
  content   String?
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id            String    @id @default(uuid())
  isGroupChat   Boolean   @default(false)
  chatName      String
  groupAdmin    String
  latestMessage String?
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  user          User[]
  Folder        Folder?   @relation(fields: [folderId], references: [id])
  folderId      String?
}

model Message {
  id        String   @id @default(uuid())
  sender    String
  receiver  String
  chatId    String
  message   String
  chatRoom  Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
